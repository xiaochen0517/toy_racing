/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 .\vehicle-racer-low.glb -c -t
*/

import * as THREE from "three"
import {Vector3} from "three"
import {useGLTF} from "@react-three/drei"
import {GLTF} from "three-stdlib"
import {RapierRigidBody, RigidBody, useRevoluteJoint} from "@react-three/rapier";
import {useRef} from "react";

type GLTFResult = GLTF & {
  nodes: {
    ["vehicle-racer-low_1"]: THREE.Mesh
    ["wheel-fr"]: THREE.Mesh
    ["wheel-br"]: THREE.Mesh
    ["wheel-bl"]: THREE.Mesh
    ["wheel-fl"]: THREE.Mesh
  }
  materials: {
    colormap: THREE.MeshStandardMaterial
  }
}

export function VehicleRacerLow(props: JSX.IntrinsicElements['group']) {
  const {nodes, materials} = useGLTF('/models/toy_card_kit/vehicle-racer-low.glb') as GLTFResult
  const bodyRef = useRef<RapierRigidBody | null>(null);
  const wheelRefs = {
    fr: useRef<RapierRigidBody | null>(null),
    br: useRef<RapierRigidBody | null>(null),
    bl: useRef<RapierRigidBody | null>(null),
    fl: useRef<RapierRigidBody | null>(null),
  };

  // 定义碰撞组
  const bodyCollisionGroup = 0x0001;
  const wheelCollisionGroup = 0x0002;
  // 定义碰撞掩码
  const bodyCollisionMask = 0xFFFD;
  const wheelCollisionMask = 0xFFFE;

  const bodyCollisionGroups = (bodyCollisionGroup << 16) | bodyCollisionMask;
  const wheelCollisionGroups = (wheelCollisionGroup << 16) | wheelCollisionMask;

  const vec3 = (x: number = 0, y?: number, z?: number) => {
    if (y === undefined || z === undefined) {
      return new Vector3(x, x, x);
    }
    return new Vector3(x, y, z);
  }

  // 添加车轮和车身连接
  useRevoluteJoint(bodyRef, wheelRefs.fr, [vec3(0.237, 0.125, -0.25), vec3(), vec3(1, 0, 0)]);
  useRevoluteJoint(bodyRef, wheelRefs.br, [vec3(0.237, 0.125, 0.25), vec3(), vec3(1, 0, 0)]);
  useRevoluteJoint(bodyRef, wheelRefs.bl, [vec3(-0.188, 0.125, 0.25), vec3(), vec3(1, 0, 0)]);
  useRevoluteJoint(bodyRef, wheelRefs.fl, [vec3(-0.188, 0.125, -0.25), vec3(), vec3(1, 0, 0)]);

  return (
    <group {...props} dispose={null}>
      <RigidBody ref={bodyRef} colliders="hull" collisionGroups={bodyCollisionGroups}>
        <mesh geometry={nodes['vehicle-racer-low_1'].geometry} material={materials.colormap}/>
      </RigidBody>
      <RigidBody
        ref={wheelRefs.fr}
        colliders="trimesh"
        collisionGroups={wheelCollisionGroups}
        position={[0.237, 0.125, -0.25]}
      >
        <mesh geometry={nodes['wheel-fr'].geometry} material={materials.colormap}/>
      </RigidBody>
      <RigidBody
        ref={wheelRefs.br}
        colliders="trimesh"
        collisionGroups={wheelCollisionGroups}
        position={[0.237, 0.125, 0.25]}
      >
        <mesh geometry={nodes['wheel-br'].geometry} material={materials.colormap}/>
      </RigidBody>
      <RigidBody
        ref={wheelRefs.bl}
        colliders="trimesh"
        collisionGroups={wheelCollisionGroups}
        position={[-0.188, 0.125, 0.25]}
      >
        <mesh geometry={nodes['wheel-bl'].geometry} material={materials.colormap}/>
      </RigidBody>
      <RigidBody
        ref={wheelRefs.fl}
        colliders="trimesh"
        collisionGroups={wheelCollisionGroups}
        position={[-0.188, 0.125, -0.25]}
      >
        <mesh geometry={nodes['wheel-fl'].geometry} material={materials.colormap}/>
      </RigidBody>
    </group>
  )
}

useGLTF.preload('/models/toy_card_kit/vehicle-racer-low.glb')
